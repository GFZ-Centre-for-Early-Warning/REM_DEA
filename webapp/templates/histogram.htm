<!DOCTYPE HTML>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>DEA Webtool - Histogram</title>
        <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/main.css') }}">
	    <script type="text/javascript" src="{{ url_for('static', filename='jquery-1.12.0.min.js') }}"></script>
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
        <style>
        body {
            font: 10px sans-serif;
        }
        select {
            display: block;
        }
        .bar {
            fill: purple;
            opacity: 0.8;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }
        </style>
    </head>
    <body>
        <div id='vis-container'></div>
        <script type="text/javascript">
    //    var bdg_data = ifrm.contentWindow.bdg_data;
    //    document.getElementById("out").innerHTML = columns;
    //}

        // Load and munge data, then make the visualization.
        //var fileName = "./cereal-detailed.csv";
        //var nutritionFields = ["calories", "protein", "fat", "sodium", "fiber",
        //                       "carbs", "sugars", "potassium", "vitamins"];

        //d3.csv(fileName, function(error, data) {
        //    var cerealMap = {};
        //    data.forEach(function(d) {
        //        var cereal = d.cereal;
        //        cerealMap[cereal] = [];

        //        // { cerealName: [ bar1Val, bar2Val, ... ] }
        //        nutritionFields.forEach(function(field) {
        //            cerealMap[cereal].push( +d[field] );
        //        });
        //    });
        //    makeVis(cerealMap);
        //});

        //unique values in an array
        function onlyUnique(value, index, self) {
            return self.indexOf(value) === index;
        }
        
        function update_histogram(){
            //clear d3 visualization
            d3.select("#vis-container").selectAll("svg").remove();
            //get names of attributes
            columns = bdg_columns.map(function(x){return x.title});
            //get each attribute as seperate variable
            var attributes = {};
            columns.forEach(function(col,i){    
                //get an array of the attribute for all bdgs
                var d = bdg_data.map(function(bdg){return bdg[i]});
                //turn attribute array ["CR","CR","CR","MR",...] into {"CR":5,"MR:2,...}
                //var unique_vals = d.filter(onlyUnique)
                //get count for each unique val
                var counts =  {};
                for (var j=0; j < d.length; j++) {
                    var val = d[j];
                    counts[val] = counts[val] ? counts[val] +1 : 1;
                }
                //add the attribute data to the dataframe
                attributes[col] = counts;
            });
            //make visualization
            makeVis(attributes);
        };

        var makeVis = function(attributes) {
            // Define dimensions of vis
            var margin = { top: 30, right: 50, bottom: 30, left: 50 },
                width  = 550 - margin.left - margin.right,
                height = 250 - margin.top  - margin.bottom;

            // Make x scale
            var xScale = d3.scale.ordinal()
            //    .domain(Object.keys(attributes))
                .rangeRoundBands([0, width], 0.1);

            // Make y scale, the domain will be defined on bar update
            var yScale = d3.scale.linear()
                .range([height, 0]);

            // Create canvas
            var canvas = d3.select("#vis-container")
              .append("svg")
                .attr("width",  width  + margin.left + margin.right)
                .attr("height", height + margin.top  + margin.bottom)
              .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            // Make x-axis and add to canvas
            var xAxis = d3.svg.axis()
                .scale(xScale)
                .orient("bottom");

            canvas.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

            // Make y-axis and add to canvas
            var yAxis = d3.svg.axis()
                .scale(yScale)
                .orient("left");

            var yAxisHandleForUpdate = canvas.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            yAxisHandleForUpdate.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Value");

            var xAxisHandleForUpdate = canvas.append("g")
                .attr("class", "x axis")
                .call(xAxis);

            xAxisHandleForUpdate.append("text")
                .attr("transform", "rotate(0)")
                .attr("x", 6)
                .attr("dx", ".71em")
                .style("text-anchor", "end")
                .text("Value");

            var updateBars = function(data) {
                // First update the y-axis domain to match data
                var ymax = d3.max(data).y;
                yScale.domain([0,ymax]);
                yAxisHandleForUpdate.call(yAxis);
                
                //Update xAxis
                xScale.domain(data.map(function(d){ return d.x; }));
                xAxisHandleForUpdate.call(xAxis);
                

            	//get the width of each bar
            	var barWidth = width / data.length;

                var bars = canvas.selectAll(".bar").exit().remove()
                var bars = canvas.selectAll(".bar").data(data);

                // Add bars for new data
                bars.enter()
                  .append("rect")
                    .attr("class", "bar")
                    .attr("x", function(d,i) { return i * barWidth + 1})
                    .attr("width", barWidth - 1)
                    .attr("y", function(d,i) { return yScale(d.y); })
                    .attr("height", function(d,i) { return height - yScale(d.y); });

            };

            // Handler for dropdown value change
            var dropdownChange = function() {
                var newVariable = d3.select(this).property('value'),
                    newData   = attributes[newVariable];
                //console.log("VAR",newVariable);
                //console.log("DAT",newData);
                //transform in x,y
                var x = Object.keys(newData);
                var newData2=[];
                for (var k=0; k < x.length; k++) {
                    newData2[k]={'x':x[k],'y':newData[x[k]]};
                }
                console.log(newData2);
                updateBars(newData2);
            };

            var dropdown = d3.select("#vis-container")
                .insert("select", "svg")
                .on("change", dropdownChange);

            dropdown.selectAll("option")
                .data(Object.keys(attributes))
                .enter().append("option")
                .attr("value", function (d) { return d; })
                .text(function (d) {
                    return d[0].toUpperCase() + d.slice(1,d.length); // capitalize 1st letter
                });

            //var initialData = {'empty':0};
            //updateBars(initialData);
        };
    </script>
</body>
</html>

